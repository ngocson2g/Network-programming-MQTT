Here is an example of how to publish and subscribe to MQTT topics using Java and the Eclipse Paho MQTT client library:

First, you will need to add the Paho MQTT client library to your project. You can do this by adding the following dependency to your project's pom.xml file if you're using Maven:
<dependency>
    <groupId>org.eclipse.paho</groupId>
    <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
    <version>1.2.5</version>
</dependency>
If you're not using Maven, you can download the Paho MQTT client library from the Eclipse Paho website and add it to your project's classpath.

Once you have the Paho MQTT client library added to your project, you can use the following code to publish a message to an MQTT topic:



import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

public class MqttPublisher {

    public static void main(String[] args) throws MqttException {
        String topic = "my/topic";
        String content = "Hello, MQTT!";
        int qos = 2;
        String broker = "tcp://localhost:1883";
        String clientId = "JavaMqttPublisher";
        MemoryPersistence persistence = new MemoryPersistence();

        MqttClient client = new MqttClient(broker, clientId, persistence);
        MqttConnectOptions connOpts = new MqttConnectOptions();
        connOpts.setCleanSession(true);

        client.connect(connOpts);

        MqttMessage message = new MqttMessage(content.getBytes());
        message.setQos(qos);

        client.publish(topic, message);

        client.disconnect();
    }

}


import org.eclipse.paho.client.mqttv3.*;
import org.eclipse.paho.client.mqttv3.persist.MemoryPersistence;

public class MqttSubscriber implements MqttCallback {

    public static void main(String[] args) throws MqttException {
        String topic = "my/topic";
        int qos = 2;
        String broker = "tcp://localhost:1883";
        String clientId = "JavaMqttSubscriber";
        MemoryPersistence persistence = new MemoryPersistence();

        MqttClient client = new MqttClient(broker, clientId, persistence);
        MqttConnectOptions connOpts = new MqttConnectOptions();
        connOpts.setCleanSession(true);

        client.setCallback(new MqttSubscriber());

        client.connect(connOpts);

        client.subscribe(topic, qos);
    }

    @Override
    public void connectionLost(Throwable cause) {
        System.out.println("Connection lost: " + cause.getMessage());
    }

    @Override
    public void messageArrived(String topic, MqttMessage message) throws Exception {
        System.out.println("Message received on topic " + topic + ": " + new String(message.getPayload()));
    }

    @Override
    public void deliveryComplete(IMqttDeliveryToken token) {
        // not used in this example
    }

}
